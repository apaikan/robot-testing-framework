// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-

/*
 * Copyright (C) 2015 iCub Facility
 * Authors: Ali Paikan
 * CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 *
 */


/**
\mainpage Welcome to RTF
\image html rtf.png

RTF stands for Robot Testing Framework. It is a generic and multi-platform testing framework for the test driven development (TDD) which is initially designed for the robotic systems. However, it can be used for any TDD system. <br> The framework provides functionalities for developing and running unit tests in a language and middleware independent manner. The test cases are developed as independent plug-ins (i.e., using scripting languages or built as dynamically loadable libraries) to be loaded and executed by an automated test runner. Moreover, a fixture manager prepares the setup (e.g., running robot interfaces, simulator) and actively monitors that all the requirements for running the tests are satisfied during the execution of the tests. These  functionalities along with other facilities such as the test result collector, result formatter and remote interface allow for rapid development of test units to cover different levels of system testing.

<br>
\section Tutorials
\li \ref rtf_plugin_example
\li \ref rtf_lua_plugin_example
\li \ref rtf_python_plugin_example
\li \ref rtf_ruby_plugin_example
\li \ref testrunner

<br>
\section install Installation
RTF library does not depend on any external library. The RTF framework has a \c testrunner utility (see \ref testrunner) to easily run the test cases which are built as plug-ins. Test cases can be organized in test suites using a simple XML files. The \c testrunner uses TinyXml library for parsing the suite XML files. RTF build system check for the installation of TinyXml and, in case, it cannot find any installed version of TinyXml library, it uses the internal version which is delivered with the RTF. The source code of the RTF is vailable at https://github.com/robotology/robot-testing.

\subsection compile Compile and Build
The installation is easy, straightforward and uses \c Cmake building system.
\verbatim
    $ git clone https://github.com/robotology/robot-testing.git
    $ cd robot-testing
    $ mkdir build; cd build
    $ cmake ../; make
\endverbatim

and optionally:
\verbatim
    $ make install
\endverbatim


\subsection conf Configuration
The only thing you need to configure is the RTF_DIR environment variable so that cmake can find RTF libraries and header files.

For example on Linux/Mac:
\verbatim
    $ echo 'export RTF_DIR=<path to the RTF build director>' >> ~/.bashrc
\endverbatim

Alternatively you can add the RTF \c 'bin' directory to your system PATH variable.
\verbatim
    $ echo 'export PATH=$PATH:<path to the RTF bin director>' >> ~/.bashrc
\endverbatim


<br>
\section example Running Examples
There are some examples which are created by building RTF (The \c BUILD_EXAMPLES=ON should be enabled in the Cmake). After building the RTF, you can run these examples from \c build/bin directory.
\verbatim
    $ cd build/bin
    $ ./simple
    $ ./simple_suite
    $ ./simple_collector
    $ ...
\endverbatim


<br>
\author Ali Paikan


 *
 */
